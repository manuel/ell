;;;; Core types
(deftype <obj>)
(deftype <class>)
(deftype <fun>)
(deftype <sym>)
(deftype <str>)
(deftype <num>)
(deftype <bool>)
(deftype <nil>)
(defconst #t)
(defconst #f)
(defconst nil)
;;;; Bindings
(defmacro def (var-or-fun-name value -> <obj>))
(defmacro set (var-or-fun-name value -> <obj>))
(defun boundp (sym -> <bool>))
(defun fboundp (sym -> <bool>))
(defmacro function (fun-name -> <fun>))
;;;; Functions
(defmacro lambda (sig form -> <fun>))
(defun funcall (sym-or-fun args key-args -> <obj>))
(defun apply (sym-or-fun &rest &all-keys -> <obj>))
;;;; Control flow
(defmacro if (<bool> <form> <form> -> <obj>))
(defmacro progn (&body forms -> <obj>))
(defmacro unwind-protect (protected cleanup))
(defmacro block (label <form> -> <obj>))
(defmacro return-from (label &optional <obj>))
(defmacro tagbody (&body tagbody))
(defmacro go (tag))
;;;; Macros
(defmacro defexpander (name fun))
(defmacro quote (<form> -> <form>))
(defmacro quasiquote (<form> -> <form>))
(defmacro unquote (<form>))
(defmacro unquote-splicing (<list-form>))
;;;; Objects
(defun eq (<obj> <obj> -> <bool>))
(defun make (symbol-or-class &all-keys slot-initializers))
(defun call-method (<obj> <sym> &rest &all-keys))
(defun slot-value (<obj> <sym> -> <obj>))
(defun set-slot-value (<obj> <sym> <obj>))
(defun class-of (<obj> -> <class>))
;;;; Classes
(defun make-class (<sym> -> <class>))
(defun set-slot-specs (<class> ...))
(defun set-superclass (<class> superclass))
(defun set-mixins (<class> mixins))
(defun set-method (<class> <sym> <fun>))
(defun subclassp (<class> <class> -> <bool>))
;;;; Exceptions
(defmacro handler-bind (handler-bindings &body forms -> <obj>))
(defun signal (condition -> <obj>))
;;;; Evaluation
(defun eval (<form> env -> <obj>))
;;;; OS
(defmacro native ((c-snippet <string>) &optional options))
