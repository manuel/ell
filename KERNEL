-*- outline -*-
* Fundamental
** `<object>` class
** `<package>` class
** `<function>` class
** `<symbol>` class
** `<string>` class
** `<number>` class
** `<boolean>` class
** `<nil>` class
* Packages
** `package &body body` special
** `provide &rest names` special
** `require import` special
* Bindings
** `defparameter name value` special
** `setq name value` special
** `boundp <name> -> <boolean>` function
** `symbol-value <name> -> <object>` function
** `set-symbol-value <name> -> <object>` function
* Functions
** `function fun-name -> <function>` special
** `lambda sig &body forms -> <function>` special
** `funcall sym-or-fun args key-args -> <object>` function
** `apply sym-or-fun &rest &keys -> <object>` function
* Control Flow
** `if test-form then-form &optional else-form -> <object>` special
** `progn &body forms -> <object>` special
** `unwind-protect protected &rest cleanup` special
** `call-with-escape-continuation <function> -> <object>` function
** `tagbody &body tagbody -> <nil>` special
** `go tag` special
* Macros
** `defsyntax name expander-fun` special
** `quasiquote form -> <form>` special
** `unquote form` special
** `unquote-splicing list-form` special
* Evaluation
** `eval <form> -> <object>` function
