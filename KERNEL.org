* Bindings
** defparameter name value -> name
** defun function-name function -> name
** set name value -> <object>
** fset name value -> <object>
** boundp symbol -> <boolean>
** fboundp symbol -> <boolean>
* Functions
** lambda sig expr -> <function>
** apply (fun <function>) (args <list>) (keys <map>) -> <object>
** funcall (fun <function>) &rest args &keys keys -> <object>
** function name -> <function>
* Packages
** defenvironment name &body body -> <object>
** defpackage name &body body -> <object>
** provide &rest exports -> <nil>
** require env -> <nil>
** require-for-syntax env -> <nil>
* Evaluation
** eval <syntax> -> <object>
* Macros and Quotation
** defmacro name expander-function -> name
** quote form -> <syntax>
** quasiquote form -> <syntax>
** form->syntax syntax form -> <syntax>
* Control Flow
** if <<syntax>> <<syntax>> <<syntax>> -> <object>
** progn &rest exprs -> <object>
** call-with-escape-continuation <function> -> <object>
** unwind-protect (protected <function>) (cleanup <function>) -> <object>
** tagbody &body tagbody -> <nil>
** go tag -> |
* Classes
** make-class name superclasses slot-specs -> class
** set-superclasses class superclasses
** set-method class method-name function
** set-slot-specs class slot-specs
** subclassp sub super -> boolean
* Objects
** make-instance class &keys slots -> object
** call-method object method-name &rest &keys -> value
** slot-value object slot-name -> value
** set-slot-value object slot-name value -> value
** class-of object -> class
** no-applicable-method object method-name args keys -> result
* Dynamic Variables
** defdynamic name value -> name
** dynamic name -> value
** set-dynamic name value -> value
* Native Interface
** native <<string>> &optional result-class -> <object>
