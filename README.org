* Executable and Linkable Lisp (=ell=)

=ell= is an effort to create a delightful Lisp for programming systems
and applications like internet servers on GNU/Linux.  =ell= is a
conservative Lisp dialect, trying to add no unproven, newfangled
features to core Lisp, and instead reuse existing working solutions
from other Lisps and related languages.  =ell= comes with a lot of
features expected by seasoned Lispers, such as a condition system, an
object system with generic functions and multiple inheritance,
orthogonal control flow primitives, optional, rest, and keyword
parameters, multiple values, powerful, lowlevel macros (with hygiene),
separate, deterministic compilation, and of course a REPL.  One rather
unusual feature, for a Lisp, is the inclusion of an /optional/ static
type system with bounded parametric polymorphism ("generics").  =ell=
packages are compiled, via C, to ELF shared objects and can be linked
with the standard linker, which allows the creation of small, complete
executables for deployment.

=ell= is not designed for maximum performance, but rather for maximum
dynamicity, although the design doesn't preclude efficient
implementation (in the spirit of Self, for example).  The assumption
is that the performance-critical parts of an application will be
written in C anyway (you wouldn't want to code something like an
efficient radix-tree for IP-address lookup in Lisp, or any dynamic
language), and for that =ell= provides convenient inline C access.
=ell= is a compiler-only implementation without a separate
interpreter, is written in GNU C, and can bootstrap itself /ex
nihilo/, requiring nothing but GCC.

The design of the =ell= kernel language is by and large finished, and
I expect to develop the first version over the course of 2010.

/Manuel Simoni <msimoni@gmail.com>/
